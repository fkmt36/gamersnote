/* tslint:disable */
/* eslint-disable */
/**
 * GamersNoteAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    readonly commentId?: string;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof Comment
     */
    replies?: Array<Comment>;
    /**
     * 
     * @type {User}
     * @memberof Comment
     */
    author?: User;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    body?: string;
    /**
     * 
     * @type {Date}
     * @memberof Comment
     */
    readonly createdAt?: Date;
}

export function CommentFromJSON(json: any): Comment {
    return CommentFromJSONTyped(json, false);
}

export function CommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Comment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'commentId': !exists(json, 'comment_id') ? undefined : json['comment_id'],
        'replies': !exists(json, 'replies') ? undefined : ((json['replies'] as Array<any>).map(CommentFromJSON)),
        'author': !exists(json, 'author') ? undefined : UserFromJSON(json['author']),
        'body': !exists(json, 'body') ? undefined : json['body'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
    };
}

export function CommentToJSON(value?: Comment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'replies': value.replies === undefined ? undefined : ((value.replies as Array<any>).map(CommentToJSON)),
        'author': UserToJSON(value.author),
        'body': value.body,
    };
}


