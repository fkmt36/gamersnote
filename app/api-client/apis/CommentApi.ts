/* tslint:disable */
/* eslint-disable */
/**
 * GamersNoteAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Article,
    ArticleFromJSON,
    ArticleToJSON,
    Comment,
    CommentFromJSON,
    CommentToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models';

export interface DeleteCommentRequest {
    articleId: string;
    commentId: string;
}

export interface GetCommentsRequest {
    articleId: string;
}

export interface PostCommentRequest {
    articleId: string;
    body?: Comment;
}

export interface PutCommentRequest {
    articleId: string;
    commentId: string;
}

/**
 * 
 */
export class CommentApi extends runtime.BaseAPI {

    /**
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling deleteComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/articles/{article_id}/comments/{comment_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))).replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteComment(requestParameters: DeleteCommentRequest): Promise<void> {
        await this.deleteCommentRaw(requestParameters);
    }

    /**
     */
    async getCommentsRaw(requestParameters: GetCommentsRequest): Promise<runtime.ApiResponse<Array<Comment>>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling getComments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles/{article_id}/comments`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CommentFromJSON));
    }

    /**
     */
    async getComments(requestParameters: GetCommentsRequest): Promise<Array<Comment>> {
        const response = await this.getCommentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postCommentRaw(requestParameters: PostCommentRequest): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling postComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/articles/{article_id}/comments`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     */
    async postComment(requestParameters: PostCommentRequest): Promise<Article> {
        const response = await this.postCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async putCommentRaw(requestParameters: PutCommentRequest): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling putComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling putComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/articles/{article_id}/comments/{comment_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))).replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async putComment(requestParameters: PutCommentRequest): Promise<Comment> {
        const response = await this.putCommentRaw(requestParameters);
        return await response.value();
    }

}
