/* tslint:disable */
/* eslint-disable */
/**
 * GamersNoteAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Article,
    ArticleFromJSON,
    ArticleToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface DeleteArticleRequest {
    articleId: string;
}

export interface GetArticleRequest {
    articleId: string;
}

export interface GetArticlesByKeywordRequest {
    since?: string;
    keyword?: string;
}

export interface GetArticlesByUserRequest {
    gamersnoteId: string;
}

export interface GetFollowsArticlesRequest {
    since?: string;
}

export interface PostArticleRequest {
    body?: Article;
}

export interface PutArticleRequest {
    articleId: string;
}

/**
 * 
 */
export class ArticleApi extends runtime.BaseAPI {

    /**
     */
    async deleteArticleRaw(requestParameters: DeleteArticleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling deleteArticle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/articles/{article_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteArticle(requestParameters: DeleteArticleRequest): Promise<void> {
        await this.deleteArticleRaw(requestParameters);
    }

    /**
     */
    async getArticleRaw(requestParameters: GetArticleRequest): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling getArticle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles/{article_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     */
    async getArticle(requestParameters: GetArticleRequest): Promise<Article> {
        const response = await this.getArticleRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getArticlesByKeywordRaw(requestParameters: GetArticlesByKeywordRequest): Promise<runtime.ApiResponse<Array<Article>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleFromJSON));
    }

    /**
     */
    async getArticlesByKeyword(requestParameters: GetArticlesByKeywordRequest): Promise<Array<Article>> {
        const response = await this.getArticlesByKeywordRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getArticlesByUserRaw(requestParameters: GetArticlesByUserRequest): Promise<runtime.ApiResponse<Array<Article>>> {
        if (requestParameters.gamersnoteId === null || requestParameters.gamersnoteId === undefined) {
            throw new runtime.RequiredError('gamersnoteId','Required parameter requestParameters.gamersnoteId was null or undefined when calling getArticlesByUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{gamersnote_id}/articles`.replace(`{${"gamersnote_id"}}`, encodeURIComponent(String(requestParameters.gamersnoteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleFromJSON));
    }

    /**
     */
    async getArticlesByUser(requestParameters: GetArticlesByUserRequest): Promise<Array<Article>> {
        const response = await this.getArticlesByUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getFollowsArticlesRaw(requestParameters: GetFollowsArticlesRequest): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/users/me/follows/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async getFollowsArticles(requestParameters: GetFollowsArticlesRequest): Promise<Array<User>> {
        const response = await this.getFollowsArticlesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postArticleRaw(requestParameters: PostArticleRequest): Promise<runtime.ApiResponse<Article>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     */
    async postArticle(requestParameters: PostArticleRequest): Promise<Article> {
        const response = await this.postArticleRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async putArticleRaw(requestParameters: PutArticleRequest): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling putArticle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/articles/{article_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     */
    async putArticle(requestParameters: PutArticleRequest): Promise<Article> {
        const response = await this.putArticleRaw(requestParameters);
        return await response.value();
    }

}
