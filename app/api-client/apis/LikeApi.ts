/* tslint:disable */
/* eslint-disable */
/**
 * GamersNoteAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Article,
    ArticleFromJSON,
    ArticleToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models';

export interface DeleteLikeRequest {
    articleId: string;
}

export interface PutLikeRequest {
    articleId: string;
}

/**
 * 
 */
export class LikeApi extends runtime.BaseAPI {

    /**
     */
    async deleteLikeRaw(requestParameters: DeleteLikeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling deleteLike.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/users/me/likes/{article_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteLike(requestParameters: DeleteLikeRequest): Promise<void> {
        await this.deleteLikeRaw(requestParameters);
    }

    /**
     */
    async getLikedArticlesRaw(): Promise<runtime.ApiResponse<Array<Article>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/users/me/likes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleFromJSON));
    }

    /**
     */
    async getLikedArticles(): Promise<Array<Article>> {
        const response = await this.getLikedArticlesRaw();
        return await response.value();
    }

    /**
     */
    async putLikeRaw(requestParameters: PutLikeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling putLike.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/users/me/likes/{article_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putLike(requestParameters: PutLikeRequest): Promise<void> {
        await this.putLikeRaw(requestParameters);
    }

}
