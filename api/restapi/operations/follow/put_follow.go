// Code generated by go-swagger; DO NOT EDIT.

package follow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutFollowHandlerFunc turns a function with the right signature into a put follow handler
type PutFollowHandlerFunc func(PutFollowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutFollowHandlerFunc) Handle(params PutFollowParams) middleware.Responder {
	return fn(params)
}

// PutFollowHandler interface for that can handle valid put follow params
type PutFollowHandler interface {
	Handle(PutFollowParams) middleware.Responder
}

// NewPutFollow creates a new http.Handler for the put follow operation
func NewPutFollow(ctx *middleware.Context, handler PutFollowHandler) *PutFollow {
	return &PutFollow{Context: ctx, Handler: handler}
}

/*PutFollow swagger:route PUT /users/me/follows/{user_id} follow putFollow

PutFollow put follow API

*/
type PutFollow struct {
	Context *middleware.Context
	Handler PutFollowHandler
}

func (o *PutFollow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutFollowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
