// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchUserVerifiedHandlerFunc turns a function with the right signature into a patch user verified handler
type PatchUserVerifiedHandlerFunc func(PatchUserVerifiedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchUserVerifiedHandlerFunc) Handle(params PatchUserVerifiedParams) middleware.Responder {
	return fn(params)
}

// PatchUserVerifiedHandler interface for that can handle valid patch user verified params
type PatchUserVerifiedHandler interface {
	Handle(PatchUserVerifiedParams) middleware.Responder
}

// NewPatchUserVerified creates a new http.Handler for the patch user verified operation
func NewPatchUserVerified(ctx *middleware.Context, handler PatchUserVerifiedHandler) *PatchUserVerified {
	return &PatchUserVerified{Context: ctx, Handler: handler}
}

/*PatchUserVerified swagger:route PATCH /users/me/verified user patchUserVerified

PatchUserVerified patch user verified API

*/
type PatchUserVerified struct {
	Context *middleware.Context
	Handler PatchUserVerifiedHandler
}

func (o *PatchUserVerified) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchUserVerifiedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchUserVerifiedBody patch user verified body
//
// swagger:model PatchUserVerifiedBody
type PatchUserVerifiedBody struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this patch user verified body
func (o *PatchUserVerifiedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserVerifiedBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchUserVerifiedBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserVerifiedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserVerifiedBody) UnmarshalBinary(b []byte) error {
	var res PatchUserVerifiedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
