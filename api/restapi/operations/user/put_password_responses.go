// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gamersnote.com/v1/models"
)

// PutPasswordOKCode is the HTTP code returned for type PutPasswordOK
const PutPasswordOKCode int = 200

/*PutPasswordOK Updated

swagger:response putPasswordOK
*/
type PutPasswordOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewPutPasswordOK creates PutPasswordOK with default headers values
func NewPutPasswordOK() *PutPasswordOK {

	return &PutPasswordOK{}
}

// WithPayload adds the payload to the put password o k response
func (o *PutPasswordOK) WithPayload(payload *models.User) *PutPasswordOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put password o k response
func (o *PutPasswordOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutPasswordOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutPasswordDefault error

swagger:response putPasswordDefault
*/
type PutPasswordDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutPasswordDefault creates PutPasswordDefault with default headers values
func NewPutPasswordDefault(code int) *PutPasswordDefault {
	if code <= 0 {
		code = 500
	}

	return &PutPasswordDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put password default response
func (o *PutPasswordDefault) WithStatusCode(code int) *PutPasswordDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put password default response
func (o *PutPasswordDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put password default response
func (o *PutPasswordDefault) WithPayload(payload *models.Error) *PutPasswordDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put password default response
func (o *PutPasswordDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutPasswordDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
