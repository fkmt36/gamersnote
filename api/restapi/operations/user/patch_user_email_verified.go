// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchUserEmailVerifiedHandlerFunc turns a function with the right signature into a patch user email verified handler
type PatchUserEmailVerifiedHandlerFunc func(PatchUserEmailVerifiedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchUserEmailVerifiedHandlerFunc) Handle(params PatchUserEmailVerifiedParams) middleware.Responder {
	return fn(params)
}

// PatchUserEmailVerifiedHandler interface for that can handle valid patch user email verified params
type PatchUserEmailVerifiedHandler interface {
	Handle(PatchUserEmailVerifiedParams) middleware.Responder
}

// NewPatchUserEmailVerified creates a new http.Handler for the patch user email verified operation
func NewPatchUserEmailVerified(ctx *middleware.Context, handler PatchUserEmailVerifiedHandler) *PatchUserEmailVerified {
	return &PatchUserEmailVerified{Context: ctx, Handler: handler}
}

/*PatchUserEmailVerified swagger:route PATCH /users/me/email/verified user patchUserEmailVerified

PatchUserEmailVerified patch user email verified API

*/
type PatchUserEmailVerified struct {
	Context *middleware.Context
	Handler PatchUserEmailVerifiedHandler
}

func (o *PatchUserEmailVerified) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchUserEmailVerifiedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchUserEmailVerifiedBody patch user email verified body
//
// swagger:model PatchUserEmailVerifiedBody
type PatchUserEmailVerifiedBody struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// uid
	// Required: true
	UID *string `json:"uid"`
}

// Validate validates this patch user email verified body
func (o *PatchUserEmailVerifiedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserEmailVerifiedBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchUserEmailVerifiedBody) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"uid", "body", o.UID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserEmailVerifiedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserEmailVerifiedBody) UnmarshalBinary(b []byte) error {
	var res PatchUserEmailVerifiedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
