// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"gamersnote.com/v1/models"
)

// PutPasswordHandlerFunc turns a function with the right signature into a put password handler
type PutPasswordHandlerFunc func(PutPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutPasswordHandlerFunc) Handle(params PutPasswordParams) middleware.Responder {
	return fn(params)
}

// PutPasswordHandler interface for that can handle valid put password params
type PutPasswordHandler interface {
	Handle(PutPasswordParams) middleware.Responder
}

// NewPutPassword creates a new http.Handler for the put password operation
func NewPutPassword(ctx *middleware.Context, handler PutPasswordHandler) *PutPassword {
	return &PutPassword{Context: ctx, Handler: handler}
}

/*PutPassword swagger:route PUT /users/me/password user putPassword

PutPassword put password API

*/
type PutPassword struct {
	Context *middleware.Context
	Handler PutPasswordHandler
}

func (o *PutPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutPasswordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutPasswordBody put password body
//
// swagger:model PutPasswordBody
type PutPasswordBody struct {

	// code
	Code string `json:"code,omitempty"`

	// password
	// Required: true
	Password models.Password `json:"password"`
}

// Validate validates this put password body
func (o *PutPasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutPasswordBody) validatePassword(formats strfmt.Registry) error {

	if err := o.Password.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "password")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPasswordBody) UnmarshalBinary(b []byte) error {
	var res PutPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
