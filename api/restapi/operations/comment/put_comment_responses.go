// Code generated by go-swagger; DO NOT EDIT.

package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gamersnote.com/v1/models"
)

// PutCommentOKCode is the HTTP code returned for type PutCommentOK
const PutCommentOKCode int = 200

/*PutCommentOK Updated

swagger:response putCommentOK
*/
type PutCommentOK struct {

	/*
	  In: Body
	*/
	Payload *models.Comment `json:"body,omitempty"`
}

// NewPutCommentOK creates PutCommentOK with default headers values
func NewPutCommentOK() *PutCommentOK {

	return &PutCommentOK{}
}

// WithPayload adds the payload to the put comment o k response
func (o *PutCommentOK) WithPayload(payload *models.Comment) *PutCommentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put comment o k response
func (o *PutCommentOK) SetPayload(payload *models.Comment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCommentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutCommentDefault error

swagger:response putCommentDefault
*/
type PutCommentDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutCommentDefault creates PutCommentDefault with default headers values
func NewPutCommentDefault(code int) *PutCommentDefault {
	if code <= 0 {
		code = 500
	}

	return &PutCommentDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put comment default response
func (o *PutCommentDefault) WithStatusCode(code int) *PutCommentDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put comment default response
func (o *PutCommentDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put comment default response
func (o *PutCommentDefault) WithPayload(payload *models.Error) *PutCommentDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put comment default response
func (o *PutCommentDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCommentDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
