// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadImageHandlerFunc turns a function with the right signature into a upload image handler
type UploadImageHandlerFunc func(UploadImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadImageHandlerFunc) Handle(params UploadImageParams) middleware.Responder {
	return fn(params)
}

// UploadImageHandler interface for that can handle valid upload image params
type UploadImageHandler interface {
	Handle(UploadImageParams) middleware.Responder
}

// NewUploadImage creates a new http.Handler for the upload image operation
func NewUploadImage(ctx *middleware.Context, handler UploadImageHandler) *UploadImage {
	return &UploadImage{Context: ctx, Handler: handler}
}

/*UploadImage swagger:route POST /users/me/images image uploadImage

UploadImage upload image API

*/
type UploadImage struct {
	Context *middleware.Context
	Handler UploadImageHandler
}

func (o *UploadImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUploadImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UploadImageCreatedBody upload image created body
//
// swagger:model UploadImageCreatedBody
type UploadImageCreatedBody struct {

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this upload image created body
func (o *UploadImageCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadImageCreatedBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("uploadImageCreated"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadImageCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadImageCreatedBody) UnmarshalBinary(b []byte) error {
	var res UploadImageCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
