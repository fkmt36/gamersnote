// Code generated by go-swagger; DO NOT EDIT.

package article

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gamersnote.com/v1/utils"
)

// GetFollowsArticlesHandlerFunc turns a function with the right signature into a get follows articles handler
type GetFollowsArticlesHandlerFunc func(GetFollowsArticlesParams, *utils.TokenPayload) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFollowsArticlesHandlerFunc) Handle(params GetFollowsArticlesParams, principal *utils.TokenPayload) middleware.Responder {
	return fn(params, principal)
}

// GetFollowsArticlesHandler interface for that can handle valid get follows articles params
type GetFollowsArticlesHandler interface {
	Handle(GetFollowsArticlesParams, *utils.TokenPayload) middleware.Responder
}

// NewGetFollowsArticles creates a new http.Handler for the get follows articles operation
func NewGetFollowsArticles(ctx *middleware.Context, handler GetFollowsArticlesHandler) *GetFollowsArticles {
	return &GetFollowsArticles{Context: ctx, Handler: handler}
}

/*GetFollowsArticles swagger:route GET /users/me/follows/articles article getFollowsArticles

GetFollowsArticles get follows articles API

*/
type GetFollowsArticles struct {
	Context *middleware.Context
	Handler GetFollowsArticlesHandler
}

func (o *GetFollowsArticles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFollowsArticlesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *utils.TokenPayload
	if uprinc != nil {
		principal = uprinc.(*utils.TokenPayload) // this is really a utils.TokenPayload, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
