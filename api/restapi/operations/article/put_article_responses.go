// Code generated by go-swagger; DO NOT EDIT.

package article

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gamersnote.com/v1/models"
)

// PutArticleOKCode is the HTTP code returned for type PutArticleOK
const PutArticleOKCode int = 200

/*PutArticleOK Updated

swagger:response putArticleOK
*/
type PutArticleOK struct {

	/*
	  In: Body
	*/
	Payload *models.Article `json:"body,omitempty"`
}

// NewPutArticleOK creates PutArticleOK with default headers values
func NewPutArticleOK() *PutArticleOK {

	return &PutArticleOK{}
}

// WithPayload adds the payload to the put article o k response
func (o *PutArticleOK) WithPayload(payload *models.Article) *PutArticleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put article o k response
func (o *PutArticleOK) SetPayload(payload *models.Article) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutArticleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutArticleDefault error

swagger:response putArticleDefault
*/
type PutArticleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutArticleDefault creates PutArticleDefault with default headers values
func NewPutArticleDefault(code int) *PutArticleDefault {
	if code <= 0 {
		code = 500
	}

	return &PutArticleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put article default response
func (o *PutArticleDefault) WithStatusCode(code int) *PutArticleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put article default response
func (o *PutArticleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put article default response
func (o *PutArticleDefault) WithPayload(payload *models.Error) *PutArticleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put article default response
func (o *PutArticleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutArticleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
