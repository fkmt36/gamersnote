// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model user
type User struct {

	// user id
	// Read Only: true
	UserID string `json:"user_id,omitempty"`

	// gamersnote id
	// Required: true
	// Max Length: 12
	// Min Length: 4
	// Pattern: [A-Za-z0-9 ]{4,12}
	GamersnoteID *string `json:"gamersnote_id"`

	// username
	// Required: true
	// Max Length: 20
	// Min Length: 4
	Username *string `json:"username"`

	// avatar url
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// message
	// Required: true
	// Max Length: 200
	// Min Length: 0
	Message *string `json:"message"`

	// registered at
	// Read Only: true
	// Format: date
	RegisteredAt strfmt.Date `json:"registered_at,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGamersnoteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateGamersnoteID(formats strfmt.Registry) error {

	if err := validate.Required("gamersnote_id", "body", m.GamersnoteID); err != nil {
		return err
	}

	if err := validate.MinLength("gamersnote_id", "body", string(*m.GamersnoteID), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("gamersnote_id", "body", string(*m.GamersnoteID), 12); err != nil {
		return err
	}

	if err := validate.Pattern("gamersnote_id", "body", string(*m.GamersnoteID), `[A-Za-z0-9 ]{4,12}`); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", string(*m.Username), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", string(*m.Username), 20); err != nil {
		return err
	}

	return nil
}

func (m *User) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("avatar_url", "body", m.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (m *User) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("message", "body", string(*m.Message), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("message", "body", string(*m.Message), 200); err != nil {
		return err
	}

	return nil
}

func (m *User) validateRegisteredAt(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredAt) { // not required
		return nil
	}

	if err := validate.FormatOf("registered_at", "body", "date", m.RegisteredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
