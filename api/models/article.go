// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Article article
//
// swagger:model article
type Article struct {

	// article id
	// Read Only: true
	ArticleID string `json:"article_id,omitempty"`

	// author
	// Read Only: true
	Author struct {
		User
	} `json:"author,omitempty"`

	// thumbnail url
	// Required: true
	ThumbnailURL *string `json:"thumbnail_url"`

	// title
	// Required: true
	Title *string `json:"title"`

	// body
	// Required: true
	Body *string `json:"body"`

	// like count
	// Read Only: true
	LikeCount int64 `json:"like_count,omitempty"`

	// comments
	// Read Only: true
	Comments []*Comment `json:"comments"`

	// is published
	// Required: true
	IsPublished *bool `json:"is_published"`

	// published at
	// Read Only: true
	// Format: date
	PublishedAt strfmt.Date `json:"published_at,omitempty"`

	// created at
	// Read Only: true
	// Format: date
	CreatedAt strfmt.Date `json:"created_at,omitempty"`

	// updated at
	// Read Only: true
	// Format: date
	UpdatedAt strfmt.Date `json:"updated_at,omitempty"`
}

// Validate validates this article
func (m *Article) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnailURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Article) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	return nil
}

func (m *Article) validateThumbnailURL(formats strfmt.Registry) error {

	if err := validate.Required("thumbnail_url", "body", m.ThumbnailURL); err != nil {
		return err
	}

	return nil
}

func (m *Article) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *Article) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *Article) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Article) validateIsPublished(formats strfmt.Registry) error {

	if err := validate.Required("is_published", "body", m.IsPublished); err != nil {
		return err
	}

	return nil
}

func (m *Article) validatePublishedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("published_at", "body", "date", m.PublishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Article) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Article) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Article) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Article) UnmarshalBinary(b []byte) error {
	var res Article
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
