// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Article article
//
// swagger:model article
type Article struct {

	// article id
	ArticleID BaseID `json:"article_id,omitempty"`

	// author
	// Read Only: true
	Author struct {
		User
	} `json:"author,omitempty"`

	// thumbnail url
	// Required: true
	ThumbnailURL ImgURL `json:"thumbnail_url"`

	// title
	// Required: true
	Title ArticleTitle `json:"title"`

	// body
	// Required: true
	Body BaseHTML `json:"body"`

	// like count
	LikeCount BaseCount `json:"like_count,omitempty"`

	// comments
	Comments Comments `json:"comments,omitempty"`

	// created at
	// Format: date
	CreatedAt BaseDate `json:"created_at,omitempty"`

	// updated at
	// Format: date
	UpdatedAt BaseDate `json:"updated_at,omitempty"`
}

// Validate validates this article
func (m *Article) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArticleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnailURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLikeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Article) validateArticleID(formats strfmt.Registry) error {

	if swag.IsZero(m.ArticleID) { // not required
		return nil
	}

	if err := m.ArticleID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("article_id")
		}
		return err
	}

	return nil
}

func (m *Article) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	return nil
}

func (m *Article) validateThumbnailURL(formats strfmt.Registry) error {

	if err := m.ThumbnailURL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("thumbnail_url")
		}
		return err
	}

	return nil
}

func (m *Article) validateTitle(formats strfmt.Registry) error {

	if err := m.Title.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("title")
		}
		return err
	}

	return nil
}

func (m *Article) validateBody(formats strfmt.Registry) error {

	if err := m.Body.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body")
		}
		return err
	}

	return nil
}

func (m *Article) validateLikeCount(formats strfmt.Registry) error {

	if swag.IsZero(m.LikeCount) { // not required
		return nil
	}

	if err := m.LikeCount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("like_count")
		}
		return err
	}

	return nil
}

func (m *Article) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	if err := m.Comments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("comments")
		}
		return err
	}

	return nil
}

func (m *Article) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := m.CreatedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_at")
		}
		return err
	}

	return nil
}

func (m *Article) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := m.UpdatedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updated_at")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Article) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Article) UnmarshalBinary(b []byte) error {
	var res Article
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
