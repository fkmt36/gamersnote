// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Comment comment
//
// swagger:model comment
type Comment struct {

	// comment id
	CommentID BaseID `json:"comment_id,omitempty"`

	// replies
	// Read Only: true
	Replies []*Comment `json:"replies"`

	// author
	// Read Only: true
	Author struct {
		User
	} `json:"author,omitempty"`

	// body
	// Required: true
	Body *string `json:"body"`

	// created at
	// Read Only: true
	// Format: date
	CreatedAt strfmt.Date `json:"created_at,omitempty"`
}

// Validate validates this comment
func (m *Comment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Comment) validateCommentID(formats strfmt.Registry) error {

	if swag.IsZero(m.CommentID) { // not required
		return nil
	}

	if err := m.CommentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("comment_id")
		}
		return err
	}

	return nil
}

func (m *Comment) validateReplies(formats strfmt.Registry) error {

	if swag.IsZero(m.Replies) { // not required
		return nil
	}

	for i := 0; i < len(m.Replies); i++ {
		if swag.IsZero(m.Replies[i]) { // not required
			continue
		}

		if m.Replies[i] != nil {
			if err := m.Replies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comment) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	return nil
}

func (m *Comment) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *Comment) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Comment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Comment) UnmarshalBinary(b []byte) error {
	var res Comment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
